import { NestFactory } from '@nestjs/core';
import { ConsoleLogger } from '@nestjs/common';
import { AppModule } from './app.module';
import {
  Counter,
  Histogram,
  register,
  collectDefaultMetrics,
} from 'prom-client';
import express from 'express';

async function bootstrap() {
  const app = await NestFactory.create(AppModule, {
    bufferLogs: true,
    logger: new ConsoleLogger({
      json: true,
    }),
  });

  // –ú–û–ù–ò–¢–û–†–ò–ù–ì - –≤–∞—Ä–∏–∞–Ω—Ç 1, —Ä–∞–±–æ—Ç–∞ —Å prom-client –Ω–∞–ø—Ä—è–º—É—é

  // 1) —Å–æ–±–∏—Ä–∞–µ–º ¬´–¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ¬ª –º–µ—Ç—Ä–∏–∫–∏ nodejs / process
  collectDefaultMetrics();

  // 2) —Å–æ–∑–¥–∞—ë–º —Å–≤–æ–∏ HTTP‚Äë–º–µ—Ç—Ä–∏–∫–∏
  const httpRequestsTotal = new Counter({
    name: 'http_requests_total',
    help: 'Total number of HTTP requests',
    labelNames: ['method', 'route', 'status_code'] as const,
  });

  const httpRequestDuration = new Histogram({
    name: 'http_request_duration_seconds',
    help: 'HTTP request duration in seconds',
    labelNames: ['method', 'route', 'status_code'] as const,
    buckets: [0.005, 0.01, 0.025, 0.05, 0.1, 0.5, 1, 2, 5],
  });

  // 3) –∑–∞–≤–æ–¥–∏–º middleware –¥–ª—è —É—á—ë—Ç–∞ –∫–∞–∂–¥–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
  // —Ç–∏–ø–∏–∑–∞—Ü–∏—é –º–æ–∂–Ω–æ –ø–æ–∑–∂–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ any
  app.use(
    (
      req: express.Request,
      res: express.Response,
      next: express.NextFunction,
    ) => {
      // –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –Ω–∞ /metrics –∏ –Ω–∞ –æ—Ç–¥–∞—á–µ —Å—Ç–∞—Ç–∏–∫–∏
      // —Å—Ç–∞—Ç–∏–∫–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –∂–µ —Ñ–∞–≤–∏–∫–æ–Ω–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å, –∫–∞–∫ –ª—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É?
      if (req.path.startsWith('/metrics') || req.path === '/favicon.ico') {
        return next();
      }

      const end = httpRequestDuration.startTimer();
      res.on('finish', () => {
        const route = req.route?.path || req.path;
        httpRequestsTotal
          .labels(req.method, route, res.statusCode.toString())
          .inc();
        end({
          method: req.method,
          route,
          status_code: res.statusCode.toString(),
        });
      });
      next();
    },
  );

  // 4) —Ç–æ—á–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç—Ä–∏–∫
  app.use('/metrics', async (_req, res) => {
    res.set('Content-Type', register.contentType);
    res.end(await register.metrics());
  });

  await app.listen(process.env.PORT || 5001);
  // —ç—Ç–æ —Ç–æ–∂–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —á–µ—Ä–µ–∑ json logger –ø—É—Å—Ç–∏—Ç—å
  console.log(`üöÄ Listening on ${process.env.PORT || 5000}`);
}

void bootstrap();
